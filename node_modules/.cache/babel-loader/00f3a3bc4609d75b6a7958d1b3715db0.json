{"ast":null,"code":"import _toConsumableArray from \"/home/dongju/Desktop/practice/udemy/blockchain/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/home/dongju/Desktop/practice/udemy/blockchain/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/dongju/Desktop/practice/udemy/blockchain/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/dongju/Desktop/practice/udemy/blockchain/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/dongju/Desktop/practice/udemy/blockchain/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dongju/Desktop/practice/udemy/blockchain/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/dongju/Desktop/practice/udemy/blockchain/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/dongju/Desktop/practice/udemy/blockchain/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/dongju/Desktop/practice/udemy/blockchain/nft-marketplace-starter-kit/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from \"../abis/KryptoBird.json\";\nimport { Result } from \"postcss\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockChainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() // first up is to detect ethereum provider\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                if (provider) {\n                  console.log(\"ehereum wallet is collected\");\n                  window.web3 = new Web3(provider);\n                } else {\n                  console.log(\"no ethereum wallet detected\");\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockChainData\",\n    value: function () {\n      var _loadBlockChainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, abi, address, contract, totalSupply, i, _KryptoBird;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; //const accounts = await web3.eth.getAccounts(); // MEtaMask의 web3는 더 이상 사용되지 않으므로 이를 허용하는 방식으로 변경해야 한다.\n\n                _context3.next = 3;\n                return window.ethereum.request({\n                  method: \"eth_requestAccounts\"\n                });\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                networkData = KryptoBird.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                abi = KryptoBird.abi;\n                address = networkData.address;\n                contract = new web3.eth.Contract(abi, address);\n                this.setState({\n                  contract: contract\n                });\n                _context3.next = 16;\n                return contract.methods.totalSupply().call();\n\n              case 16:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                });\n                i = 1;\n\n              case 19:\n                if (!(i <= totalSupply)) {\n                  _context3.next = 27;\n                  break;\n                }\n\n                _context3.next = 22;\n                return contract.methods.kryptoBirdz(i - 1).call();\n\n              case 22:\n                _KryptoBird = _context3.sent;\n                this.setState({\n                  kryptoBirdz: [].concat(_toConsumableArray(this.state.kryptoBirdz), [_KryptoBird])\n                });\n\n              case 24:\n                i++;\n                _context3.next = 19;\n                break;\n\n              case 27:\n                _context3.next = 30;\n                break;\n\n              case 29:\n                window.alert(\"Smart contract not deployed\");\n\n              case 30:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockChainData() {\n        return _loadBlockChainData.apply(this, arguments);\n      }\n\n      return loadBlockChainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.mint = function (kryptoBird) {\n      _this.state.contract.methods.mint(kryptoBird).send({\n        from: _this.state.account\n      }).once(\"receipt\", function (receipt) {\n        _this.setState({\n          kryptoBirz: [].concat(_toConsumableArray(_this.state.kryptoBirdz), [KryptoBird])\n        });\n      });\n    };\n\n    _this.state = {\n      account: \"\",\n      contract: null,\n      totalSupply: 0,\n      kryptoBirdz: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-3 mr-0\",\n        style: {\n          color: \"white\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Krypto Birdz NFTs (Non Fungible Tokens)\"), React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, this.state.account)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/dongju/Desktop/practice/udemy/blockchain/nft-marketplace-starter-kit/src/components/App.js"],"names":["React","Component","Web3","detectEthereumProvider","KryptoBird","Result","App","loadWeb3","loadBlockChainData","provider","console","log","window","web3","ethereum","request","method","accounts","setState","account","eth","net","getId","networkId","networkData","networks","abi","address","contract","Contract","methods","totalSupply","call","i","kryptoBirdz","state","alert","props","mint","kryptoBird","send","from","once","receipt","kryptoBirz","color"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from \"../abis/KryptoBird.json\";\nimport { Result } from \"postcss\";\n\nclass App extends Component {\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockChainData();\n  }\n\n  // first up is to detect ethereum provider\n  async loadWeb3() {\n    const provider = await detectEthereumProvider();\n\n    if (provider) {\n      console.log(\"ehereum wallet is collected\");\n      window.web3 = new Web3(provider);\n    } else {\n      console.log(\"no ethereum wallet detected\");\n    }\n  }\n\n  async loadBlockChainData() {\n    const web3 = window.web3;\n    //const accounts = await web3.eth.getAccounts(); // MEtaMask의 web3는 더 이상 사용되지 않으므로 이를 허용하는 방식으로 변경해야 한다.\n    const accounts = await window.ethereum.request({\n      method: \"eth_requestAccounts\",\n    });\n    this.setState({ account: accounts });\n\n    const networkId = await web3.eth.net.getId();\n    const networkData = KryptoBird.networks[networkId];\n\n    if (networkData) {\n      const abi = KryptoBird.abi;\n      const address = networkData.address;\n      const contract = new web3.eth.Contract(abi, address);\n      this.setState({ contract });\n\n      const totalSupply = await contract.methods.totalSupply().call();\n      this.setState({ totalSupply });\n\n      for (let i = 1; i <= totalSupply; i++) {\n        const KryptoBird = await contract.methods.kryptoBirdz(i - 1).call();\n        this.setState({\n          kryptoBirdz: [...this.state.kryptoBirdz, KryptoBird],\n        });\n      }\n    } else {\n      window.alert(\"Smart contract not deployed\");\n    }\n  }\n\n  mint = (kryptoBird) => {\n    this.state.contract.methods\n      .mint(kryptoBird)\n      .send({ from: this.state.account })\n      .once(\"receipt\", (receipt) => {\n        this.setState({\n          kryptoBirz: [...this.state.kryptoBirdz, KryptoBird],\n        });\n      });\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      contract: null,\n      totalSupply: 0,\n      kryptoBirdz: [],\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <div\n            className=\"navbar-brand col-sm-3 col-md-3 mr-0\"\n            style={{ color: \"white\" }}\n          >\n            Krypto Birdz NFTs (Non Fungible Tokens)\n          </div>\n          <ul className=\"navbar-nav px-3\">\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n              <small className=\"text-white\">{this.state.account}</small>\n            </li>\n          </ul>\n        </nav>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}